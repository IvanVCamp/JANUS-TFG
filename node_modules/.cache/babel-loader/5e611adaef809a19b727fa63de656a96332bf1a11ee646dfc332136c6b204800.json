{"ast":null,"code":"import React,{useEffect,useState}from'react';import{useNavigate}from'react-router-dom';import taskService from'../services/taskService';import{DragDropContext,Droppable,Draggable}from'react-beautiful-dnd';import'../styles/taskPlanner.css';/** \r\n * Comprueba si dos fechas pertenecen al mismo día (ignora hora/minutos).\r\n */import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function isSameDay(d1,d2){const date1=new Date(d1);const date2=new Date(d2);return date1.getFullYear()===date2.getFullYear()&&date1.getMonth()===date2.getMonth()&&date1.getDate()===date2.getDate();}/**\r\n * Genera un array de slots representando las 24 horas del día:\r\n * [\"00:00\", \"01:00\", \"02:00\", ..., \"23:00\"].\r\n */function generate24HourSlots(){const slots=[];for(let hour=0;hour<24;hour++){const label=`${String(hour).padStart(2,'0')}:00`;slots.push({id:label,tasks:[]});}return slots;}/**\r\n * Devuelve un array con los días de un mes, incluyendo huecos vacíos\r\n * al inicio para alinear la cuadrícula (ej.: si el mes empieza en miércoles).\r\n */function getMonthDays(year,month){const days=[];const firstDayOfMonth=new Date(year,month,1);const lastDay=new Date(year,month+1,0).getDate();// día 28..31\nconst startWeekDay=firstDayOfMonth.getDay();// 0=Domingo, 1=Lunes, etc.\n// Huecos \"vacíos\" antes del día 1\nfor(let i=0;i<startWeekDay;i++){days.push(null);}// Días reales del mes\nfor(let d=1;d<=lastDay;d++){days.push(new Date(year,month,d));}return days;}function TaskPlanner(){const navigate=useNavigate();// Estado con todas las tareas\nconst[tasks,setTasks]=useState([]);// Vista actual: 'month' (mes) o 'day' (día)\nconst[currentView,setCurrentView]=useState('month');// Fecha seleccionada para vista diaria\nconst[selectedDate,setSelectedDate]=useState(new Date());// Slots de 24 horas para la vista diaria\nconst[timeSlots,setTimeSlots]=useState([]);// Año y mes actuales para la vista mensual\nconst[currentYear,setCurrentYear]=useState(new Date().getFullYear());const[currentMonth,setCurrentMonth]=useState(new Date().getMonth());// Modal para crear tarea\nconst[showCreateModal,setShowCreateModal]=useState(false);const[newTaskData,setNewTaskData]=useState({title:'',description:'',category:'Personal',startTime:'',endTime:'',reminderTime:''});// Al montar, cargar tareas del backend\nuseEffect(()=>{async function fetchTasks(){try{const data=await taskService.getTasks();setTasks(data);}catch(err){console.error('Error al obtener tareas:',err);}}fetchTasks();},[]);// Generar la lista de 24 horas\nuseEffect(()=>{setTimeSlots(generate24HourSlots());},[]);// Reasignar tareas a los slots cuando cambien las tareas o la fecha\n// (solo aplica si estamos en vista diaria)\nuseEffect(()=>{if(currentView!=='day')return;// Clonamos la lista de slots vacíos\nconst updatedSlots=generate24HourSlots();// Filtrar tareas que pertenecen al día seleccionado\nconst tasksOfDay=tasks.filter(t=>isSameDay(t.startTime,selectedDate));// Para cada tarea, calculamos su slot por la hora\ntasksOfDay.forEach(task=>{const hour=new Date(task.startTime).getHours();const slotId=`${String(hour).padStart(2,'0')}:00`;const slot=updatedSlots.find(s=>s.id===slotId);if(slot){slot.tasks.push(task);}});setTimeSlots(updatedSlots);},[tasks,selectedDate,currentView]);/** \r\n   * Cambiar a vista diaria cuando se hace click en un día del mes.\r\n   */const handleDayClick=dayDate=>{setSelectedDate(dayDate);setCurrentView('day');};/** Navegar al mes anterior en la vista mensual */const handlePrevMonth=()=>{let newMonth=currentMonth-1;let newYear=currentYear;if(newMonth<0){newMonth=11;newYear-=1;}setCurrentMonth(newMonth);setCurrentYear(newYear);};/** Navegar al mes siguiente en la vista mensual */const handleNextMonth=()=>{let newMonth=currentMonth+1;let newYear=currentYear;if(newMonth>11){newMonth=0;newYear+=1;}setCurrentMonth(newMonth);setCurrentYear(newYear);};/**\r\n   * Manejo del drag & drop en la vista diaria.\r\n   */const onDragEnd=async result=>{if(currentView!=='day')return;// Solo aplica en vista día\nconst{source,destination,draggableId}=result;if(!destination)return;// Suelto fuera de droppable\n// Si no se cambió nada\nif(source.droppableId===destination.droppableId&&source.index===destination.index){return;}try{// Localizamos la tarea arrastrada\nconst task=tasks.find(t=>t._id===draggableId);if(!task)return;// Nuevo slot (hora) al que se movió\nconst[destHourStr]=destination.droppableId.split(':');const destHour=parseInt(destHourStr,10);// Ajustamos su startTime a la nueva hora, manteniendo el día\nconst newStart=new Date(task.startTime);newStart.setFullYear(selectedDate.getFullYear());newStart.setMonth(selectedDate.getMonth());newStart.setDate(selectedDate.getDate());newStart.setHours(destHour,0,0,0);// Ejemplo: endTime = startTime + 1 hora\nconst newEnd=new Date(newStart.getTime()+60*60*1000);// Actualizamos en backend\nconst updatedTask=await taskService.updateTask(task._id,{startTime:newStart,endTime:newEnd});// Refrescamos en estado local\nsetTasks(prev=>prev.map(t=>t._id===updatedTask._id?updatedTask:t));}catch(err){console.error('Error actualizando tarea:',err);}};/**\r\n   * Crear una nueva tarea (modal).\r\n   */const handleCreateTask=async e=>{e.preventDefault();try{const created=await taskService.createTask(newTaskData);setTasks(prev=>[...prev,created]);setShowCreateModal(false);// Reset form\nsetNewTaskData({title:'',description:'',category:'Personal',startTime:'',endTime:'',reminderTime:''});}catch(err){console.error('Error creando tarea:',err);}};/** Cerrar sesión (ejemplo) */const handleLogout=()=>{navigate('/');};// ------------------\n// VISTA MENSUAL\n// ------------------\nconst renderMonthView=()=>{const daysArray=getMonthDays(currentYear,currentMonth);const monthName=new Date(currentYear,currentMonth).toLocaleString('default',{month:'long'});// Agrupamos en filas de 7 celdas\nconst rows=[];for(let i=0;i<daysArray.length;i+=7){rows.push(daysArray.slice(i,i+7));}return/*#__PURE__*/_jsxs(\"div\",{className:\"month-view-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"month-nav\",children:[/*#__PURE__*/_jsx(\"button\",{onClick:handlePrevMonth,children:\"< Anterior\"}),/*#__PURE__*/_jsxs(\"h2\",{children:[monthName,\" \",currentYear]}),/*#__PURE__*/_jsx(\"button\",{onClick:handleNextMonth,children:\"Siguiente >\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"month-grid\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"week-days\",children:[/*#__PURE__*/_jsx(\"div\",{children:\"Dom\"}),/*#__PURE__*/_jsx(\"div\",{children:\"Lun\"}),/*#__PURE__*/_jsx(\"div\",{children:\"Mar\"}),/*#__PURE__*/_jsx(\"div\",{children:\"Mi\\xE9\"}),/*#__PURE__*/_jsx(\"div\",{children:\"Jue\"}),/*#__PURE__*/_jsx(\"div\",{children:\"Vie\"}),/*#__PURE__*/_jsx(\"div\",{children:\"S\\xE1b\"})]}),rows.map((row,rowIndex)=>/*#__PURE__*/_jsx(\"div\",{className:\"week-row\",children:row.map((day,colIndex)=>{if(!day){// Celda vacía\nreturn/*#__PURE__*/_jsx(\"div\",{className:\"day-cell empty\"},colIndex);}// Tareas del día\nconst dayTasks=tasks.filter(t=>isSameDay(t.startTime,day));return/*#__PURE__*/_jsxs(\"div\",{className:\"day-cell\",onClick:()=>handleDayClick(day),children:[/*#__PURE__*/_jsx(\"div\",{className:\"day-number\",children:day.getDate()}),/*#__PURE__*/_jsxs(\"div\",{className:\"day-tasks\",children:[dayTasks.slice(0,3).map(task=>/*#__PURE__*/_jsxs(\"div\",{className:\"day-task-item\",children:[\"\\u2022 \",task.title]},task._id)),dayTasks.length>3&&/*#__PURE__*/_jsxs(\"div\",{className:\"more-tasks\",children:[\"+\",dayTasks.length-3,\" m\\xE1s\"]})]})]},colIndex);})},rowIndex))]})]});};// ------------------\n// VISTA DIARIA\n// ------------------\nconst renderDayView=()=>{const dateStr=selectedDate.toLocaleDateString('es-ES',{day:'numeric',month:'long',year:'numeric'});return/*#__PURE__*/_jsx(DragDropContext,{onDragEnd:onDragEnd,children:/*#__PURE__*/_jsxs(\"div\",{className:\"day-view-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"day-view-header\",children:[/*#__PURE__*/_jsx(\"button\",{onClick:()=>setCurrentView('month'),children:\"Volver al Mes\"}),/*#__PURE__*/_jsx(\"h2\",{children:dateStr})]}),/*#__PURE__*/_jsx(\"div\",{className:\"slots-container\",children:timeSlots.map(slot=>/*#__PURE__*/_jsx(Droppable,{droppableId:slot.id,children:provided=>/*#__PURE__*/_jsxs(\"div\",{className:\"slot-column\",ref:provided.innerRef,...provided.droppableProps,children:[/*#__PURE__*/_jsxs(\"div\",{className:\"slot-header\",children:[/*#__PURE__*/_jsx(\"i\",{className:\"fa fa-clock-o slot-icon\"}),/*#__PURE__*/_jsx(\"span\",{children:slot.id})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"tasks-list\",children:[slot.tasks.map((task,index)=>/*#__PURE__*/_jsx(Draggable,{draggableId:task._id,index:index,children:providedDrag=>/*#__PURE__*/_jsxs(\"div\",{className:\"task-card\",ref:providedDrag.innerRef,...providedDrag.draggableProps,...providedDrag.dragHandleProps,children:[/*#__PURE__*/_jsx(\"h4\",{className:\"task-title\",children:task.title}),/*#__PURE__*/_jsx(\"p\",{className:\"task-category\",children:task.category}),/*#__PURE__*/_jsx(\"p\",{className:\"task-desc\",children:task.description})]})},task._id)),provided.placeholder]})]})},slot.id))})]})});};// ------------------\n// RENDER PRINCIPAL\n// ------------------\nreturn/*#__PURE__*/_jsxs(\"div\",{className:\"task-planner-container\",children:[/*#__PURE__*/_jsxs(\"header\",{className:\"top-bar\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"left-section\",children:/*#__PURE__*/_jsx(\"i\",{className:\"fa fa-user-circle user-icon\",\"aria-hidden\":\"true\"})}),/*#__PURE__*/_jsx(\"div\",{className:\"center-section\",children:/*#__PURE__*/_jsx(\"h1\",{className:\"title\",children:\"PLANIFICADOR DE TAREAS\"})}),/*#__PURE__*/_jsxs(\"div\",{className:\"right-section\",children:[/*#__PURE__*/_jsx(\"i\",{className:\"fa fa-bell bell-icon\",\"aria-hidden\":\"true\"}),/*#__PURE__*/_jsxs(\"button\",{className:\"logout-btn\",onClick:handleLogout,children:[/*#__PURE__*/_jsx(\"i\",{className:\"fa fa-sign-out\",\"aria-hidden\":\"true\"}),/*#__PURE__*/_jsx(\"span\",{children:\"Salir\"})]})]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"create-task-bar\",children:/*#__PURE__*/_jsxs(\"button\",{onClick:()=>setShowCreateModal(true),className:\"create-task-btn\",children:[/*#__PURE__*/_jsx(\"i\",{className:\"fa fa-plus\"}),\" Nuevo\"]})}),currentView==='month'?renderMonthView():renderDayView(),showCreateModal&&/*#__PURE__*/_jsx(\"div\",{className:\"modal-overlay\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"modal-content\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Crear Nueva Tarea\"}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleCreateTask,className:\"create-task-form\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"T\\xEDtulo\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:newTaskData.title,onChange:e=>setNewTaskData({...newTaskData,title:e.target.value}),required:true}),/*#__PURE__*/_jsx(\"label\",{children:\"Descripci\\xF3n\"}),/*#__PURE__*/_jsx(\"textarea\",{value:newTaskData.description,onChange:e=>setNewTaskData({...newTaskData,description:e.target.value})}),/*#__PURE__*/_jsx(\"label\",{children:\"Categor\\xEDa\"}),/*#__PURE__*/_jsxs(\"select\",{value:newTaskData.category,onChange:e=>setNewTaskData({...newTaskData,category:e.target.value}),children:[/*#__PURE__*/_jsx(\"option\",{value:\"Personal\",children:\"Personal\"}),/*#__PURE__*/_jsx(\"option\",{value:\"Estudio\",children:\"Estudio\"}),/*#__PURE__*/_jsx(\"option\",{value:\"Terapia\",children:\"Terapia\"}),/*#__PURE__*/_jsx(\"option\",{value:\"Ocio\",children:\"Ocio\"}),/*#__PURE__*/_jsx(\"option\",{value:\"Otro\",children:\"Otro\"})]}),/*#__PURE__*/_jsx(\"label\",{children:\"Hora de inicio\"}),/*#__PURE__*/_jsx(\"input\",{type:\"datetime-local\",value:newTaskData.startTime,onChange:e=>setNewTaskData({...newTaskData,startTime:e.target.value}),required:true}),/*#__PURE__*/_jsx(\"label\",{children:\"Hora de fin\"}),/*#__PURE__*/_jsx(\"input\",{type:\"datetime-local\",value:newTaskData.endTime,onChange:e=>setNewTaskData({...newTaskData,endTime:e.target.value}),required:true}),/*#__PURE__*/_jsx(\"label\",{children:\"Recordatorio (opcional)\"}),/*#__PURE__*/_jsx(\"input\",{type:\"datetime-local\",value:newTaskData.reminderTime,onChange:e=>setNewTaskData({...newTaskData,reminderTime:e.target.value})}),/*#__PURE__*/_jsxs(\"div\",{className:\"modal-buttons\",children:[/*#__PURE__*/_jsx(\"button\",{type:\"submit\",className:\"save-btn\",children:\"Guardar\"}),/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:\"cancel-btn\",onClick:()=>setShowCreateModal(false),children:\"Cancelar\"})]})]})]})}),/*#__PURE__*/_jsx(\"footer\",{className:\"footer-bar\",children:/*#__PURE__*/_jsx(\"p\",{children:\"\\xA9 2025. JANUS - Planificador de Tareas Avanzado\"})})]});}export default TaskPlanner;","map":{"version":3,"names":["React","useEffect","useState","useNavigate","taskService","DragDropContext","Droppable","Draggable","jsx","_jsx","jsxs","_jsxs","isSameDay","d1","d2","date1","Date","date2","getFullYear","getMonth","getDate","generate24HourSlots","slots","hour","label","String","padStart","push","id","tasks","getMonthDays","year","month","days","firstDayOfMonth","lastDay","startWeekDay","getDay","i","d","TaskPlanner","navigate","setTasks","currentView","setCurrentView","selectedDate","setSelectedDate","timeSlots","setTimeSlots","currentYear","setCurrentYear","currentMonth","setCurrentMonth","showCreateModal","setShowCreateModal","newTaskData","setNewTaskData","title","description","category","startTime","endTime","reminderTime","fetchTasks","data","getTasks","err","console","error","updatedSlots","tasksOfDay","filter","t","forEach","task","getHours","slotId","slot","find","s","handleDayClick","dayDate","handlePrevMonth","newMonth","newYear","handleNextMonth","onDragEnd","result","source","destination","draggableId","droppableId","index","_id","destHourStr","split","destHour","parseInt","newStart","setFullYear","setMonth","setDate","setHours","newEnd","getTime","updatedTask","updateTask","prev","map","handleCreateTask","e","preventDefault","created","createTask","handleLogout","renderMonthView","daysArray","monthName","toLocaleString","rows","length","slice","className","children","onClick","row","rowIndex","day","colIndex","dayTasks","renderDayView","dateStr","toLocaleDateString","provided","ref","innerRef","droppableProps","providedDrag","draggableProps","dragHandleProps","placeholder","onSubmit","type","value","onChange","target","required"],"sources":["C:/Users/User/Desktop/TFG/prototipo-TFG/Janus-TFG/src/components/TaskPlanner.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport taskService from '../services/taskService';\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\nimport '../styles/taskPlanner.css';\r\n\r\n/** \r\n * Comprueba si dos fechas pertenecen al mismo día (ignora hora/minutos).\r\n */\r\nfunction isSameDay(d1, d2) {\r\n  const date1 = new Date(d1);\r\n  const date2 = new Date(d2);\r\n  return (\r\n    date1.getFullYear() === date2.getFullYear() &&\r\n    date1.getMonth() === date2.getMonth() &&\r\n    date1.getDate() === date2.getDate()\r\n  );\r\n}\r\n\r\n/**\r\n * Genera un array de slots representando las 24 horas del día:\r\n * [\"00:00\", \"01:00\", \"02:00\", ..., \"23:00\"].\r\n */\r\nfunction generate24HourSlots() {\r\n  const slots = [];\r\n  for (let hour = 0; hour < 24; hour++) {\r\n    const label = `${String(hour).padStart(2, '0')}:00`;\r\n    slots.push({ id: label, tasks: [] });\r\n  }\r\n  return slots;\r\n}\r\n\r\n/**\r\n * Devuelve un array con los días de un mes, incluyendo huecos vacíos\r\n * al inicio para alinear la cuadrícula (ej.: si el mes empieza en miércoles).\r\n */\r\nfunction getMonthDays(year, month) {\r\n  const days = [];\r\n  const firstDayOfMonth = new Date(year, month, 1);\r\n  const lastDay = new Date(year, month + 1, 0).getDate(); // día 28..31\r\n  const startWeekDay = firstDayOfMonth.getDay(); // 0=Domingo, 1=Lunes, etc.\r\n\r\n  // Huecos \"vacíos\" antes del día 1\r\n  for (let i = 0; i < startWeekDay; i++) {\r\n    days.push(null);\r\n  }\r\n\r\n  // Días reales del mes\r\n  for (let d = 1; d <= lastDay; d++) {\r\n    days.push(new Date(year, month, d));\r\n  }\r\n  return days;\r\n}\r\n\r\nfunction TaskPlanner() {\r\n  const navigate = useNavigate();\r\n\r\n  // Estado con todas las tareas\r\n  const [tasks, setTasks] = useState([]);\r\n\r\n  // Vista actual: 'month' (mes) o 'day' (día)\r\n  const [currentView, setCurrentView] = useState('month');\r\n\r\n  // Fecha seleccionada para vista diaria\r\n  const [selectedDate, setSelectedDate] = useState(new Date());\r\n\r\n  // Slots de 24 horas para la vista diaria\r\n  const [timeSlots, setTimeSlots] = useState([]);\r\n\r\n  // Año y mes actuales para la vista mensual\r\n  const [currentYear, setCurrentYear] = useState(new Date().getFullYear());\r\n  const [currentMonth, setCurrentMonth] = useState(new Date().getMonth());\r\n\r\n  // Modal para crear tarea\r\n  const [showCreateModal, setShowCreateModal] = useState(false);\r\n  const [newTaskData, setNewTaskData] = useState({\r\n    title: '',\r\n    description: '',\r\n    category: 'Personal',\r\n    startTime: '',\r\n    endTime: '',\r\n    reminderTime: ''\r\n  });\r\n\r\n  // Al montar, cargar tareas del backend\r\n  useEffect(() => {\r\n    async function fetchTasks() {\r\n      try {\r\n        const data = await taskService.getTasks();\r\n        setTasks(data);\r\n      } catch (err) {\r\n        console.error('Error al obtener tareas:', err);\r\n      }\r\n    }\r\n    fetchTasks();\r\n  }, []);\r\n\r\n  // Generar la lista de 24 horas\r\n  useEffect(() => {\r\n    setTimeSlots(generate24HourSlots());\r\n  }, []);\r\n\r\n  // Reasignar tareas a los slots cuando cambien las tareas o la fecha\r\n  // (solo aplica si estamos en vista diaria)\r\n  useEffect(() => {\r\n    if (currentView !== 'day') return;\r\n\r\n    // Clonamos la lista de slots vacíos\r\n    const updatedSlots = generate24HourSlots();\r\n\r\n    // Filtrar tareas que pertenecen al día seleccionado\r\n    const tasksOfDay = tasks.filter(t => isSameDay(t.startTime, selectedDate));\r\n\r\n    // Para cada tarea, calculamos su slot por la hora\r\n    tasksOfDay.forEach(task => {\r\n      const hour = new Date(task.startTime).getHours();\r\n      const slotId = `${String(hour).padStart(2, '0')}:00`;\r\n      const slot = updatedSlots.find(s => s.id === slotId);\r\n      if (slot) {\r\n        slot.tasks.push(task);\r\n      }\r\n    });\r\n\r\n    setTimeSlots(updatedSlots);\r\n  }, [tasks, selectedDate, currentView]);\r\n\r\n  /** \r\n   * Cambiar a vista diaria cuando se hace click en un día del mes.\r\n   */\r\n  const handleDayClick = (dayDate) => {\r\n    setSelectedDate(dayDate);\r\n    setCurrentView('day');\r\n  };\r\n\r\n  /** Navegar al mes anterior en la vista mensual */\r\n  const handlePrevMonth = () => {\r\n    let newMonth = currentMonth - 1;\r\n    let newYear = currentYear;\r\n    if (newMonth < 0) {\r\n      newMonth = 11;\r\n      newYear -= 1;\r\n    }\r\n    setCurrentMonth(newMonth);\r\n    setCurrentYear(newYear);\r\n  };\r\n\r\n  /** Navegar al mes siguiente en la vista mensual */\r\n  const handleNextMonth = () => {\r\n    let newMonth = currentMonth + 1;\r\n    let newYear = currentYear;\r\n    if (newMonth > 11) {\r\n      newMonth = 0;\r\n      newYear += 1;\r\n    }\r\n    setCurrentMonth(newMonth);\r\n    setCurrentYear(newYear);\r\n  };\r\n\r\n  /**\r\n   * Manejo del drag & drop en la vista diaria.\r\n   */\r\n  const onDragEnd = async (result) => {\r\n    if (currentView !== 'day') return; // Solo aplica en vista día\r\n\r\n    const { source, destination, draggableId } = result;\r\n    if (!destination) return; // Suelto fuera de droppable\r\n\r\n    // Si no se cambió nada\r\n    if (\r\n      source.droppableId === destination.droppableId &&\r\n      source.index === destination.index\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Localizamos la tarea arrastrada\r\n      const task = tasks.find(t => t._id === draggableId);\r\n      if (!task) return;\r\n\r\n      // Nuevo slot (hora) al que se movió\r\n      const [destHourStr] = destination.droppableId.split(':');\r\n      const destHour = parseInt(destHourStr, 10);\r\n\r\n      // Ajustamos su startTime a la nueva hora, manteniendo el día\r\n      const newStart = new Date(task.startTime);\r\n      newStart.setFullYear(selectedDate.getFullYear());\r\n      newStart.setMonth(selectedDate.getMonth());\r\n      newStart.setDate(selectedDate.getDate());\r\n      newStart.setHours(destHour, 0, 0, 0);\r\n\r\n      // Ejemplo: endTime = startTime + 1 hora\r\n      const newEnd = new Date(newStart.getTime() + 60 * 60 * 1000);\r\n\r\n      // Actualizamos en backend\r\n      const updatedTask = await taskService.updateTask(task._id, {\r\n        startTime: newStart,\r\n        endTime: newEnd\r\n      });\r\n\r\n      // Refrescamos en estado local\r\n      setTasks(prev =>\r\n        prev.map(t => (t._id === updatedTask._id ? updatedTask : t))\r\n      );\r\n    } catch (err) {\r\n      console.error('Error actualizando tarea:', err);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Crear una nueva tarea (modal).\r\n   */\r\n  const handleCreateTask = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      const created = await taskService.createTask(newTaskData);\r\n      setTasks(prev => [...prev, created]);\r\n      setShowCreateModal(false);\r\n      // Reset form\r\n      setNewTaskData({\r\n        title: '',\r\n        description: '',\r\n        category: 'Personal',\r\n        startTime: '',\r\n        endTime: '',\r\n        reminderTime: ''\r\n      });\r\n    } catch (err) {\r\n      console.error('Error creando tarea:', err);\r\n    }\r\n  };\r\n\r\n  /** Cerrar sesión (ejemplo) */\r\n  const handleLogout = () => {\r\n    navigate('/');\r\n  };\r\n\r\n  // ------------------\r\n  // VISTA MENSUAL\r\n  // ------------------\r\n  const renderMonthView = () => {\r\n    const daysArray = getMonthDays(currentYear, currentMonth);\r\n    const monthName = new Date(currentYear, currentMonth).toLocaleString('default', { month: 'long' });\r\n\r\n    // Agrupamos en filas de 7 celdas\r\n    const rows = [];\r\n    for (let i = 0; i < daysArray.length; i += 7) {\r\n      rows.push(daysArray.slice(i, i + 7));\r\n    }\r\n\r\n    return (\r\n      <div className=\"month-view-container\">\r\n        <div className=\"month-nav\">\r\n          <button onClick={handlePrevMonth}>&lt; Anterior</button>\r\n          <h2>{monthName} {currentYear}</h2>\r\n          <button onClick={handleNextMonth}>Siguiente &gt;</button>\r\n        </div>\r\n\r\n        <div className=\"month-grid\">\r\n          <div className=\"week-days\">\r\n            <div>Dom</div><div>Lun</div><div>Mar</div><div>Mié</div><div>Jue</div><div>Vie</div><div>Sáb</div>\r\n          </div>\r\n          {rows.map((row, rowIndex) => (\r\n            <div className=\"week-row\" key={rowIndex}>\r\n              {row.map((day, colIndex) => {\r\n                if (!day) {\r\n                  // Celda vacía\r\n                  return <div className=\"day-cell empty\" key={colIndex}></div>;\r\n                }\r\n                // Tareas del día\r\n                const dayTasks = tasks.filter(t => isSameDay(t.startTime, day));\r\n                return (\r\n                  <div\r\n                    className=\"day-cell\"\r\n                    key={colIndex}\r\n                    onClick={() => handleDayClick(day)}\r\n                  >\r\n                    <div className=\"day-number\">{day.getDate()}</div>\r\n                    <div className=\"day-tasks\">\r\n                      {dayTasks.slice(0, 3).map((task) => (\r\n                        <div key={task._id} className=\"day-task-item\">\r\n                          • {task.title}\r\n                        </div>\r\n                      ))}\r\n                      {dayTasks.length > 3 && (\r\n                        <div className=\"more-tasks\">\r\n                          +{dayTasks.length - 3} más\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // ------------------\r\n  // VISTA DIARIA\r\n  // ------------------\r\n  const renderDayView = () => {\r\n    const dateStr = selectedDate.toLocaleDateString('es-ES', {\r\n      day: 'numeric', month: 'long', year: 'numeric'\r\n    });\r\n\r\n    return (\r\n      <DragDropContext onDragEnd={onDragEnd}>\r\n        <div className=\"day-view-container\">\r\n          <div className=\"day-view-header\">\r\n            <button onClick={() => setCurrentView('month')}>Volver al Mes</button>\r\n            <h2>{dateStr}</h2>\r\n          </div>\r\n\r\n          <div className=\"slots-container\">\r\n            {timeSlots.map(slot => (\r\n              <Droppable droppableId={slot.id} key={slot.id}>\r\n                {(provided) => (\r\n                  <div\r\n                    className=\"slot-column\"\r\n                    ref={provided.innerRef}\r\n                    {...provided.droppableProps}\r\n                  >\r\n                    <div className=\"slot-header\">\r\n                      <i className=\"fa fa-clock-o slot-icon\"></i>\r\n                      <span>{slot.id}</span>\r\n                    </div>\r\n                    <div className=\"tasks-list\">\r\n                      {slot.tasks.map((task, index) => (\r\n                        <Draggable\r\n                          key={task._id}\r\n                          draggableId={task._id}\r\n                          index={index}\r\n                        >\r\n                          {(providedDrag) => (\r\n                            <div\r\n                              className=\"task-card\"\r\n                              ref={providedDrag.innerRef}\r\n                              {...providedDrag.draggableProps}\r\n                              {...providedDrag.dragHandleProps}\r\n                            >\r\n                              <h4 className=\"task-title\">{task.title}</h4>\r\n                              <p className=\"task-category\">{task.category}</p>\r\n                              <p className=\"task-desc\">{task.description}</p>\r\n                            </div>\r\n                          )}\r\n                        </Draggable>\r\n                      ))}\r\n                      {provided.placeholder}\r\n                    </div>\r\n                  </div>\r\n                )}\r\n              </Droppable>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </DragDropContext>\r\n    );\r\n  };\r\n\r\n  // ------------------\r\n  // RENDER PRINCIPAL\r\n  // ------------------\r\n  return (\r\n    <div className=\"task-planner-container\">\r\n      {/* Barra superior */}\r\n      <header className=\"top-bar\">\r\n        <div className=\"left-section\">\r\n          <i className=\"fa fa-user-circle user-icon\" aria-hidden=\"true\"></i>\r\n        </div>\r\n        <div className=\"center-section\">\r\n          <h1 className=\"title\">PLANIFICADOR DE TAREAS</h1>\r\n        </div>\r\n        <div className=\"right-section\">\r\n          <i className=\"fa fa-bell bell-icon\" aria-hidden=\"true\"></i>\r\n          <button className=\"logout-btn\" onClick={handleLogout}>\r\n            <i className=\"fa fa-sign-out\" aria-hidden=\"true\"></i>\r\n            <span>Salir</span>\r\n          </button>\r\n        </div>\r\n      </header>\r\n\r\n      {/* Botón para crear tarea */}\r\n      <div className=\"create-task-bar\">\r\n        <button onClick={() => setShowCreateModal(true)} className=\"create-task-btn\">\r\n          <i className=\"fa fa-plus\"></i> Nuevo\r\n        </button>\r\n      </div>\r\n\r\n      {/* Contenido: vista mensual o vista diaria */}\r\n      {currentView === 'month' ? renderMonthView() : renderDayView()}\r\n\r\n      {/* Modal de creación de tarea */}\r\n      {showCreateModal && (\r\n        <div className=\"modal-overlay\">\r\n          <div className=\"modal-content\">\r\n            <h2>Crear Nueva Tarea</h2>\r\n            <form onSubmit={handleCreateTask} className=\"create-task-form\">\r\n              <label>Título</label>\r\n              <input\r\n                type=\"text\"\r\n                value={newTaskData.title}\r\n                onChange={(e) => setNewTaskData({ ...newTaskData, title: e.target.value })}\r\n                required\r\n              />\r\n\r\n              <label>Descripción</label>\r\n              <textarea\r\n                value={newTaskData.description}\r\n                onChange={(e) => setNewTaskData({ ...newTaskData, description: e.target.value })}\r\n              />\r\n\r\n              <label>Categoría</label>\r\n              <select\r\n                value={newTaskData.category}\r\n                onChange={(e) => setNewTaskData({ ...newTaskData, category: e.target.value })}\r\n              >\r\n                <option value=\"Personal\">Personal</option>\r\n                <option value=\"Estudio\">Estudio</option>\r\n                <option value=\"Terapia\">Terapia</option>\r\n                <option value=\"Ocio\">Ocio</option>\r\n                <option value=\"Otro\">Otro</option>\r\n              </select>\r\n\r\n              <label>Hora de inicio</label>\r\n              <input\r\n                type=\"datetime-local\"\r\n                value={newTaskData.startTime}\r\n                onChange={(e) => setNewTaskData({ ...newTaskData, startTime: e.target.value })}\r\n                required\r\n              />\r\n\r\n              <label>Hora de fin</label>\r\n              <input\r\n                type=\"datetime-local\"\r\n                value={newTaskData.endTime}\r\n                onChange={(e) => setNewTaskData({ ...newTaskData, endTime: e.target.value })}\r\n                required\r\n              />\r\n\r\n              <label>Recordatorio (opcional)</label>\r\n              <input\r\n                type=\"datetime-local\"\r\n                value={newTaskData.reminderTime}\r\n                onChange={(e) => setNewTaskData({ ...newTaskData, reminderTime: e.target.value })}\r\n              />\r\n\r\n              <div className=\"modal-buttons\">\r\n                <button type=\"submit\" className=\"save-btn\">Guardar</button>\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"cancel-btn\"\r\n                  onClick={() => setShowCreateModal(false)}\r\n                >\r\n                  Cancelar\r\n                </button>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Pie de página */}\r\n      <footer className=\"footer-bar\">\r\n        <p>© 2025. JANUS - Planificador de Tareas Avanzado</p>\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TaskPlanner;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}