{"ast":null,"code":"// src/components/PatientTemplates.js\nimport React,{useState,useEffect}from'react';import axios from'axios';import authService from'../services/authService';import'../styles/routineTemplates.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";export default function PatientTemplates(){var _currentUser$_id;const[instances,setInstances]=useState([]);const[filterTag,setFilterTag]=useState('');const[loading,setLoading]=useState(true);const[error,setError]=useState(null);// Recuperamos id de paciente (de tu authService.getCurrentUser)\nconst currentUser=authService.getCurrentUser();const patientId=(_currentUser$_id=currentUser===null||currentUser===void 0?void 0:currentUser._id)!==null&&_currentUser$_id!==void 0?_currentUser$_id:currentUser===null||currentUser===void 0?void 0:currentUser.id;const token=localStorage.getItem('token');useEffect(()=>{const fetchInstances=async()=>{if(!token||!patientId){setError('No estás autenticado. Por favor, inicia sesión.');setLoading(false);return;}try{// GET /api/routines/instances/:patientId\nconst res=await axios.get(`/api/routines/instances/${patientId}`,{headers:{'x-auth-token':token}});// res.data es un array de instancias\nsetInstances(Array.isArray(res.data)?res.data:[]);}catch(err){var _err$response,_err$response$data;console.error('Error al cargar instancias:',err);setError(((_err$response=err.response)===null||_err$response===void 0?void 0:(_err$response$data=_err$response.data)===null||_err$response$data===void 0?void 0:_err$response$data.msg)||'Error al cargar plantillas');}finally{setLoading(false);}};fetchInstances();},[patientId,token]);const toggleActivity=async(instanceId,idx)=>{try{var _inst$completedActivi;const inst=instances.find(i=>i._id===instanceId);const completed=(_inst$completedActivi=inst.completedActivities)===null||_inst$completedActivi===void 0?void 0:_inst$completedActivi.includes(idx);// POST /api/routines/instances/:instanceId/activities/:activityIdx\nawait axios.post(`/api/routines/instances/${instanceId}/activities/${idx}`,{completed:!completed},{headers:{'x-auth-token':token}});// Actualizamos estado localmente\nsetInstances(prev=>prev.map(i=>{if(i._id!==instanceId)return i;const set=new Set(i.completedActivities||[]);if(!completed)set.add(idx);else set.delete(idx);return{...i,completedActivities:Array.from(set)};}));}catch(err){console.error('Error marcando actividad:',err);setError('No se pudo actualizar el estado de la actividad');}};if(loading)return/*#__PURE__*/_jsx(\"p\",{children:\"Cargando plantillas asignadas\\u2026\"});if(error)return/*#__PURE__*/_jsx(\"p\",{className:\"error-msg\",children:error});// Filtrado por etiqueta sobre inst.template.tags\nconst filtered=instances.filter(inst=>{var _inst$template$tags;return filterTag?(_inst$template$tags=inst.template.tags)===null||_inst$template$tags===void 0?void 0:_inst$template$tags.includes(filterTag):true;});return/*#__PURE__*/_jsx(\"div\",{className:\"routine-templates-page patient-templates-page\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"tpl-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"tpl-header\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Mis Plantillas Asignadas\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"Filtrar por etiqueta\",value:filterTag,onChange:e=>setFilterTag(e.target.value),className:\"small-input tag-filter\"})]}),!filtered.length?/*#__PURE__*/_jsx(\"p\",{children:\"No se encontraron plantillas con esa etiqueta.\"}):/*#__PURE__*/_jsx(\"div\",{className:\"tpl-grid\",children:filtered.map(inst=>{var _inst$template$tags2;return/*#__PURE__*/_jsxs(\"div\",{className:\"tpl-card\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"tpl-title\",children:inst.template.name}),/*#__PURE__*/_jsx(\"p\",{className:\"tpl-desc\",children:inst.template.description}),/*#__PURE__*/_jsxs(\"div\",{className:\"tpl-meta\",children:[\"Duraci\\xF3n: \",inst.template.duration,\" min | Tags: \",(_inst$template$tags2=inst.template.tags)===null||_inst$template$tags2===void 0?void 0:_inst$template$tags2.join(', ')]}),/*#__PURE__*/_jsx(\"ul\",{className:\"tpl-activities-list\",children:inst.template.activities.map((act,idx)=>{var _inst$completedActivi2;const done=(_inst$completedActivi2=inst.completedActivities)===null||_inst$completedActivi2===void 0?void 0:_inst$completedActivi2.includes(idx);return/*#__PURE__*/_jsxs(\"li\",{className:\"activity-item\",children:[/*#__PURE__*/_jsxs(\"label\",{children:[/*#__PURE__*/_jsx(\"input\",{type:\"checkbox\",checked:done,onChange:()=>toggleActivity(inst._id,idx)}),/*#__PURE__*/_jsxs(\"span\",{className:done?'completed':'',children:[act.name,\" \\u2013 Nivel \",act.challenge,\" \\u2013 \",act.minutes,\" min\"]})]}),act.desc&&/*#__PURE__*/_jsx(\"p\",{className:\"activity-desc\",children:act.desc})]},idx);})})]},inst._id);})})]})});}","map":{"version":3,"names":["React","useState","useEffect","axios","authService","jsx","_jsx","jsxs","_jsxs","PatientTemplates","_currentUser$_id","instances","setInstances","filterTag","setFilterTag","loading","setLoading","error","setError","currentUser","getCurrentUser","patientId","_id","id","token","localStorage","getItem","fetchInstances","res","get","headers","Array","isArray","data","err","_err$response","_err$response$data","console","response","msg","toggleActivity","instanceId","idx","_inst$completedActivi","inst","find","i","completed","completedActivities","includes","post","prev","map","set","Set","add","delete","from","children","className","filtered","filter","_inst$template$tags","template","tags","type","placeholder","value","onChange","e","target","length","_inst$template$tags2","name","description","duration","join","activities","act","_inst$completedActivi2","done","checked","challenge","minutes","desc"],"sources":["C:/Users/User/Desktop/TFG/prototipo-TFG/Janus-TFG/src/components/PatientTemplatesPage.js"],"sourcesContent":["// src/components/PatientTemplates.js\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport authService from '../services/authService';\r\nimport '../styles/routineTemplates.css';\r\n\r\nexport default function PatientTemplates() {\r\n  const [instances, setInstances] = useState([]);\r\n  const [filterTag, setFilterTag] = useState('');\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Recuperamos id de paciente (de tu authService.getCurrentUser)\r\n  const currentUser = authService.getCurrentUser();\r\n  const patientId = currentUser?._id ?? currentUser?.id;\r\n  const token     = localStorage.getItem('token');\r\n\r\n  useEffect(() => {\r\n    const fetchInstances = async () => {\r\n      if (!token || !patientId) {\r\n        setError('No estás autenticado. Por favor, inicia sesión.');\r\n        setLoading(false);\r\n        return;\r\n      }\r\n      try {\r\n        // GET /api/routines/instances/:patientId\r\n        const res = await axios.get(\r\n          `/api/routines/instances/${patientId}`,\r\n          { headers: { 'x-auth-token': token } }\r\n        );\r\n        // res.data es un array de instancias\r\n        setInstances(Array.isArray(res.data) ? res.data : []);\r\n      } catch (err) {\r\n        console.error('Error al cargar instancias:', err);\r\n        setError(err.response?.data?.msg || 'Error al cargar plantillas');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    fetchInstances();\r\n  }, [patientId, token]);\r\n\r\n  const toggleActivity = async (instanceId, idx) => {\r\n    try {\r\n      const inst = instances.find(i => i._id === instanceId);\r\n      const completed = inst.completedActivities?.includes(idx);\r\n\r\n      // POST /api/routines/instances/:instanceId/activities/:activityIdx\r\n      await axios.post(\r\n        `/api/routines/instances/${instanceId}/activities/${idx}`,\r\n        { completed: !completed },\r\n        { headers: { 'x-auth-token': token } }\r\n      );\r\n\r\n      // Actualizamos estado localmente\r\n      setInstances(prev =>\r\n        prev.map(i => {\r\n          if (i._id !== instanceId) return i;\r\n          const set = new Set(i.completedActivities || []);\r\n          if (!completed) set.add(idx);\r\n          else set.delete(idx);\r\n          return { ...i, completedActivities: Array.from(set) };\r\n        })\r\n      );\r\n    } catch (err) {\r\n      console.error('Error marcando actividad:', err);\r\n      setError('No se pudo actualizar el estado de la actividad');\r\n    }\r\n  };\r\n\r\n  if (loading) return <p>Cargando plantillas asignadas…</p>;\r\n  if (error)   return <p className=\"error-msg\">{error}</p>;\r\n\r\n  // Filtrado por etiqueta sobre inst.template.tags\r\n  const filtered = instances.filter(inst =>\r\n    filterTag\r\n      ? inst.template.tags?.includes(filterTag)\r\n      : true\r\n  );\r\n\r\n  return (\r\n    <div className=\"routine-templates-page patient-templates-page\">\r\n      <div className=\"tpl-container\">\r\n        <div className=\"tpl-header\">\r\n          <h1>Mis Plantillas Asignadas</h1>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Filtrar por etiqueta\"\r\n            value={filterTag}\r\n            onChange={e => setFilterTag(e.target.value)}\r\n            className=\"small-input tag-filter\"\r\n          />\r\n        </div>\r\n\r\n        {!filtered.length ? (\r\n          <p>No se encontraron plantillas con esa etiqueta.</p>\r\n        ) : (\r\n          <div className=\"tpl-grid\">\r\n            {filtered.map(inst => (\r\n              <div key={inst._id} className=\"tpl-card\">\r\n                <h2 className=\"tpl-title\">{inst.template.name}</h2>\r\n                <p className=\"tpl-desc\">{inst.template.description}</p>\r\n                <div className=\"tpl-meta\">\r\n                  Duración: {inst.template.duration} min | Tags: {inst.template.tags?.join(', ')}\r\n                </div>\r\n\r\n                <ul className=\"tpl-activities-list\">\r\n                  {inst.template.activities.map((act, idx) => {\r\n                    const done = inst.completedActivities?.includes(idx);\r\n                    return (\r\n                      <li key={idx} className=\"activity-item\">\r\n                        <label>\r\n                          <input\r\n                            type=\"checkbox\"\r\n                            checked={done}\r\n                            onChange={() => toggleActivity(inst._id, idx)}\r\n                          />\r\n                          <span className={done ? 'completed' : ''}>\r\n                            {act.name} – Nivel {act.challenge} – {act.minutes} min\r\n                          </span>\r\n                        </label>\r\n                        {act.desc && (\r\n                          <p className=\"activity-desc\">{act.desc}</p>\r\n                        )}\r\n                      </li>\r\n                    );\r\n                  })}\r\n                </ul>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}