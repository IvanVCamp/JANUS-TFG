{"ast":null,"code":"import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function parseJwt(token){try{const[,payload]=token.split('.');const b64=payload.replace(/-/g,'+').replace(/_/g,'/');const json=atob(b64);return JSON.parse(json);}catch(err){console.error('parseJwt error:',err);return null;}}export default function PatientTemplates(){const[instances,setInstances]=useState([]);const[filterTag,setFilterTag]=useState('');const[loading,setLoading]=useState(true);const[error,setError]=useState(null);useEffect(()=>{const fetchInstances=async()=>{const token=localStorage.getItem('token');if(!token){setError('No estás autenticado. Por favor, inicia sesión.');setLoading(false);return;}// Emulamos TherapistInterests: recuperamos datos sin validaciones extra\nconst decoded=parseJwt(token);const patientId=decoded===null||decoded===void 0?void 0:decoded.id;if(!patientId){setError('No se pudo identificar al paciente.');setLoading(false);return;}try{// Llamada igual que TherapistInterests, pero a tu endpoint de instancias\nconst res=await axios.get(`/api/routines/instances/${patientId}`,{headers:{'x-auth-token':token}});// Aseguramos siempre un array\nsetInstances(Array.isArray(res.data)?res.data:[]);}catch(err){var _err$response,_err$response$data;console.error('Error al cargar instancias:',err);setError(((_err$response=err.response)===null||_err$response===void 0?void 0:(_err$response$data=_err$response.data)===null||_err$response$data===void 0?void 0:_err$response$data.msg)||'Error al cargar plantillas');}finally{setLoading(false);}};fetchInstances();},[]);const toggleActivity=async(instanceId,idx)=>{const token=localStorage.getItem('token');try{var _instances$find$compl;// Igual que TherapistInterests usa axios con x-auth-token\nawait axios.post(`/api/routines/instances/${instanceId}/activities/${idx}`,// body { completed } según tu controlador\n{completed:!((_instances$find$compl=instances.find(i=>i._id===instanceId).completedActivities)!==null&&_instances$find$compl!==void 0&&_instances$find$compl.includes(idx))},{headers:{'x-auth-token':token}});// Actualizamos estado localmente\nsetInstances(prev=>prev.map(inst=>{if(inst._id!==instanceId)return inst;const set=new Set(inst.completedActivities||[]);if(set.has(idx))set.delete(idx);else set.add(idx);return{...inst,completedActivities:Array.from(set)};}));}catch(err){console.error('Error marcando actividad:',err);setError('No se pudo actualizar la actividad.');}};if(loading)return/*#__PURE__*/_jsx(\"p\",{children:\"Cargando plantillas asignadas\\u2026\"});if(error)return/*#__PURE__*/_jsx(\"p\",{className:\"error-msg\",children:error});// Filtrado idéntico al anterior\nconst filtered=instances.filter(inst=>{var _inst$template$tags;return filterTag?(_inst$template$tags=inst.template.tags)===null||_inst$template$tags===void 0?void 0:_inst$template$tags.includes(filterTag):true;});return/*#__PURE__*/_jsx(\"div\",{className:\"routine-templates-page patient-templates-page\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"tpl-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"tpl-header\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Mis Plantillas Asignadas\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"Filtrar por etiqueta\",value:filterTag,onChange:e=>setFilterTag(e.target.value),className:\"small-input tag-filter\"})]}),!filtered.length?/*#__PURE__*/_jsx(\"p\",{children:\"No se encontraron plantillas con esa etiqueta.\"}):/*#__PURE__*/_jsx(\"div\",{className:\"tpl-grid\",children:filtered.map(inst=>{var _inst$template$tags2;return/*#__PURE__*/_jsxs(\"div\",{className:\"tpl-card\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"tpl-title\",children:inst.template.name}),/*#__PURE__*/_jsx(\"p\",{className:\"tpl-desc\",children:inst.template.description}),/*#__PURE__*/_jsxs(\"div\",{className:\"tpl-meta\",children:[\"Duraci\\xF3n: \",inst.template.duration,\" min | Tags: \",(_inst$template$tags2=inst.template.tags)===null||_inst$template$tags2===void 0?void 0:_inst$template$tags2.join(', ')]}),/*#__PURE__*/_jsx(\"ul\",{className:\"tpl-activities-list\",children:inst.template.activities.map((act,idx)=>{var _inst$completedActivi;const done=(_inst$completedActivi=inst.completedActivities)===null||_inst$completedActivi===void 0?void 0:_inst$completedActivi.includes(idx);return/*#__PURE__*/_jsxs(\"li\",{className:\"activity-item\",children:[/*#__PURE__*/_jsxs(\"label\",{children:[/*#__PURE__*/_jsx(\"input\",{type:\"checkbox\",checked:done,onChange:()=>toggleActivity(inst._id,idx)}),/*#__PURE__*/_jsxs(\"span\",{className:done?'completed':'',children:[act.name,\" \\u2013 Nivel \",act.challenge,\" \\u2013 \",act.minutes,\" min\"]})]}),act.desc&&/*#__PURE__*/_jsx(\"p\",{className:\"activity-desc\",children:act.desc})]},idx);})})]},inst._id);})})]})});}","map":{"version":3,"names":["parseJwt","token","payload","split","b64","replace","json","atob","JSON","parse","err","console","error","PatientTemplates","instances","setInstances","useState","filterTag","setFilterTag","loading","setLoading","setError","useEffect","fetchInstances","localStorage","getItem","decoded","patientId","id","res","axios","get","headers","Array","isArray","data","_err$response","_err$response$data","response","msg","toggleActivity","instanceId","idx","_instances$find$compl","post","completed","find","i","_id","completedActivities","includes","prev","map","inst","set","Set","has","delete","add","from","_jsx","children","className","filtered","filter","_inst$template$tags","template","tags","_jsxs","type","placeholder","value","onChange","e","target","length","_inst$template$tags2","name","description","duration","join","activities","act","_inst$completedActivi","done","checked","challenge","minutes","desc"],"sources":["C:/Users/User/Desktop/TFG/prototipo-TFG/Janus-TFG/src/components/PatientTemplatesPage.js"],"sourcesContent":["function parseJwt(token) {\r\n  try {\r\n    const [, payload] = token.split('.');\r\n    const b64 = payload.replace(/-/g, '+').replace(/_/g, '/');\r\n    const json = atob(b64);\r\n    return JSON.parse(json);\r\n  } catch (err) {\r\n    console.error('parseJwt error:', err);\r\n    return null;\r\n  }\r\n}\r\n\r\nexport default function PatientTemplates() {\r\n  const [instances, setInstances] = useState([]);\r\n  const [filterTag, setFilterTag] = useState('');\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchInstances = async () => {\r\n      const token = localStorage.getItem('token');\r\n      if (!token) {\r\n        setError('No estás autenticado. Por favor, inicia sesión.');\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      // Emulamos TherapistInterests: recuperamos datos sin validaciones extra\r\n      const decoded = parseJwt(token);\r\n      const patientId = decoded?.id;\r\n      if (!patientId) {\r\n        setError('No se pudo identificar al paciente.');\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        // Llamada igual que TherapistInterests, pero a tu endpoint de instancias\r\n        const res = await axios.get(\r\n          `/api/routines/instances/${patientId}`,\r\n          { headers: { 'x-auth-token': token } }\r\n        );\r\n        // Aseguramos siempre un array\r\n        setInstances(Array.isArray(res.data) ? res.data : []);\r\n      } catch (err) {\r\n        console.error('Error al cargar instancias:', err);\r\n        setError(err.response?.data?.msg || 'Error al cargar plantillas');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchInstances();\r\n  }, []);\r\n\r\n  const toggleActivity = async (instanceId, idx) => {\r\n    const token = localStorage.getItem('token');\r\n    try {\r\n      // Igual que TherapistInterests usa axios con x-auth-token\r\n      await axios.post(\r\n        `/api/routines/instances/${instanceId}/activities/${idx}`,\r\n        // body { completed } según tu controlador\r\n        { completed: !instances\r\n            .find(i => i._id === instanceId)\r\n            .completedActivities?.includes(idx)\r\n        },\r\n        { headers: { 'x-auth-token': token } }\r\n      );\r\n\r\n      // Actualizamos estado localmente\r\n      setInstances(prev =>\r\n        prev.map(inst => {\r\n          if (inst._id !== instanceId) return inst;\r\n          const set = new Set(inst.completedActivities || []);\r\n          if (set.has(idx)) set.delete(idx);\r\n          else set.add(idx);\r\n          return { ...inst, completedActivities: Array.from(set) };\r\n        })\r\n      );\r\n    } catch (err) {\r\n      console.error('Error marcando actividad:', err);\r\n      setError('No se pudo actualizar la actividad.');\r\n    }\r\n  };\r\n\r\n  if (loading) return <p>Cargando plantillas asignadas…</p>;\r\n  if (error)   return <p className=\"error-msg\">{error}</p>;\r\n\r\n  // Filtrado idéntico al anterior\r\n  const filtered = instances.filter(inst =>\r\n    filterTag\r\n      ? inst.template.tags?.includes(filterTag)\r\n      : true\r\n  );\r\n\r\n  return (\r\n    <div className=\"routine-templates-page patient-templates-page\">\r\n      <div className=\"tpl-container\">\r\n        <div className=\"tpl-header\">\r\n          <h1>Mis Plantillas Asignadas</h1>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Filtrar por etiqueta\"\r\n            value={filterTag}\r\n            onChange={e => setFilterTag(e.target.value)}\r\n            className=\"small-input tag-filter\"\r\n          />\r\n        </div>\r\n\r\n        {!filtered.length ? (\r\n          <p>No se encontraron plantillas con esa etiqueta.</p>\r\n        ) : (\r\n          <div className=\"tpl-grid\">\r\n            {filtered.map(inst => (\r\n              <div key={inst._id} className=\"tpl-card\">\r\n                <h2 className=\"tpl-title\">{inst.template.name}</h2>\r\n                <p className=\"tpl-desc\">{inst.template.description}</p>\r\n                <div className=\"tpl-meta\">\r\n                  Duración: {inst.template.duration} min | Tags: {inst.template.tags?.join(', ')}\r\n                </div>\r\n\r\n                <ul className=\"tpl-activities-list\">\r\n                  {inst.template.activities.map((act, idx) => {\r\n                    const done = inst.completedActivities?.includes(idx);\r\n                    return (\r\n                      <li key={idx} className=\"activity-item\">\r\n                        <label>\r\n                          <input\r\n                            type=\"checkbox\"\r\n                            checked={done}\r\n                            onChange={() => toggleActivity(inst._id, idx)}\r\n                          />\r\n                          <span className={done ? 'completed' : ''}>\r\n                            {act.name} – Nivel {act.challenge} – {act.minutes} min\r\n                          </span>\r\n                        </label>\r\n                        {act.desc && <p className=\"activity-desc\">{act.desc}</p>}\r\n                      </li>\r\n                    );\r\n                  })}\r\n                </ul>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}