{"ast":null,"code":"import React,{useState,useEffect}from'react';import axios from'axios';import'../styles/therapistRoutines.css';import{useNavigate,useLocation}from'react-router-dom';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";function PatientRoutines(){const navigate=useNavigate();const location=useLocation();const query=new URLSearchParams(location.search);const qPatientId=query.get('patientId');const[patients,setPatients]=useState([]);const[patientId,setPatientId]=useState(qPatientId||'');const[game,setGame]=useState(null);const[metrics,setMetrics]=useState({});// 1) Obtener lista de pacientes\nuseEffect(()=>{axios.get('/api/therapist/patients',{headers:{'x-auth-token':localStorage.getItem('token')}}).then(res=>setPatients(res.data)).catch(console.error);},[]);// 2) Cuando cambie paciente, cargar datos de juego\nuseEffect(()=>{if(!patientId)return;axios.get(`/api/game?patientId=${patientId}`,{headers:{'x-auth-token':localStorage.getItem('token')}}).then(res=>{if(res.data.length===0)return;const latest=res.data[0];setGame(latest);computeMetrics(latest.timeSlots);}).catch(console.error);},[patientId]);// 3) Función que calcula las métricas\nfunction computeMetrics(slots){const allActivities=slots.flatMap(s=>s.activities);const totalMin=allActivities.reduce((sum,a)=>sum+a.duration,0);const unique=new Set(allActivities.map(a=>a.activityId)).size;const mean=totalMin/allActivities.length||0;const variance=allActivities.reduce((v,a)=>v+Math.pow(a.duration-mean,2),0)/(allActivities.length||1);const stddev=Math.sqrt(variance);// Balance mañana/tarde/noche\nconst slices={mañana:0,tarde:0,noche:0};slots.forEach(s=>{const hour=parseInt(s.slot.split(':')[0],10);const sumSlot=s.activities.reduce((sum,a)=>sum+a.duration,0);if(hour<12)slices.mañana+=sumSlot;else if(hour<18)slices.tarde+=sumSlot;else slices.noche+=sumSlot;});setMetrics({totalMin,pctDay:(totalMin/1440*100).toFixed(1),distinct:unique,entries:allActivities.length,mean:mean.toFixed(1),stddev:stddev.toFixed(1),balance:slices});}return/*#__PURE__*/_jsxs(\"div\",{className:\"routines-container\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Estad\\xEDsticas de Rutinas\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"routines-controls\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Paciente:\"}),/*#__PURE__*/_jsxs(\"select\",{value:patientId,onChange:e=>setPatientId(e.target.value),children:[/*#__PURE__*/_jsx(\"option\",{value:\"\",children:\"-- Selecciona paciente --\"}),patients.map(p=>/*#__PURE__*/_jsxs(\"option\",{value:p._id,children:[p.nombre,\" \",p.apellidos]},p._id))]})]}),game&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"routines-summary\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"summary-card\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Tiempo programado\"}),/*#__PURE__*/_jsxs(\"p\",{children:[metrics.totalMin,\"\\xA0min (\",metrics.pctDay,\"\\xA0%)\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"summary-card\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Actividades distintas\"}),/*#__PURE__*/_jsxs(\"p\",{children:[metrics.distinct,\" / \",metrics.entries]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"summary-card\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Duraci\\xF3n media\"}),/*#__PURE__*/_jsxs(\"p\",{children:[metrics.mean,\"\\xA0min\"]})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"bar-chart\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Balance ma\\xF1ana / tarde / noche\"}),['mañana','tarde','noche'].map(key=>{const val=metrics.balance[key]||0;const pct=(val/metrics.totalMin*100).toFixed(1);return/*#__PURE__*/_jsxs(\"div\",{className:\"bar-row\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"label\",children:key}),/*#__PURE__*/_jsx(\"div\",{className:\"bar\",style:{width:`${pct}%`}}),/*#__PURE__*/_jsxs(\"span\",{style:{marginLeft:'8px'},children:[pct,\"%\"]})]},key);})]}),/*#__PURE__*/_jsxs(\"table\",{className:\"metrics-table\",children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{children:\"M\\xE9trica\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Valor\"})]})}),/*#__PURE__*/_jsx(\"tbody\",{children:/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{children:\"Desviaci\\xF3n est\\xE1ndar\"}),/*#__PURE__*/_jsxs(\"td\",{children:[metrics.stddev,\"\\xA0min\"]})]})})]})]})]});}export default PatientRoutines;","map":{"version":3,"names":["React","useState","useEffect","axios","useNavigate","useLocation","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","PatientRoutines","navigate","location","query","URLSearchParams","search","qPatientId","get","patients","setPatients","patientId","setPatientId","game","setGame","metrics","setMetrics","headers","localStorage","getItem","then","res","data","catch","console","error","length","latest","computeMetrics","timeSlots","slots","allActivities","flatMap","s","activities","totalMin","reduce","sum","a","duration","unique","Set","map","activityId","size","mean","variance","v","Math","pow","stddev","sqrt","slices","mañana","tarde","noche","forEach","hour","parseInt","slot","split","sumSlot","pctDay","toFixed","distinct","entries","balance","className","children","value","onChange","e","target","p","_id","nombre","apellidos","key","val","pct","style","width","marginLeft"],"sources":["C:/Users/User/Desktop/TFG/prototipo-TFG/Janus-TFG/src/components/PatientRoutines.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport '../styles/therapistRoutines.css';\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\n\r\nfunction PatientRoutines() {\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  const query = new URLSearchParams(location.search);\r\n  const qPatientId = query.get('patientId');\r\n\r\n  const [patients, setPatients] = useState([]);\r\n  const [patientId, setPatientId] = useState(qPatientId || '');\r\n  const [game, setGame] = useState(null);\r\n  const [metrics, setMetrics] = useState({});\r\n\r\n  // 1) Obtener lista de pacientes\r\n  useEffect(() => {\r\n    axios.get('/api/therapist/patients', {\r\n      headers: { 'x-auth-token': localStorage.getItem('token') }\r\n    }).then(res => setPatients(res.data))\r\n      .catch(console.error);\r\n  }, []);\r\n\r\n  // 2) Cuando cambie paciente, cargar datos de juego\r\n  useEffect(() => {\r\n    if (!patientId) return;\r\n    axios.get(`/api/game?patientId=${patientId}`, {\r\n      headers: { 'x-auth-token': localStorage.getItem('token') }\r\n    }).then(res => {\r\n      if (res.data.length === 0) return;\r\n      const latest = res.data[0];\r\n      setGame(latest);\r\n      computeMetrics(latest.timeSlots);\r\n    }).catch(console.error);\r\n  }, [patientId]);\r\n\r\n  // 3) Función que calcula las métricas\r\n  function computeMetrics(slots) {\r\n    const allActivities = slots.flatMap(s => s.activities);\r\n    const totalMin = allActivities.reduce((sum,a) => sum + a.duration, 0);\r\n    const unique = new Set(allActivities.map(a=>a.activityId)).size;\r\n    const mean = totalMin / allActivities.length || 0;\r\n    const variance = allActivities.reduce((v,a) => v + Math.pow(a.duration - mean,2), 0) / (allActivities.length || 1);\r\n    const stddev = Math.sqrt(variance);\r\n\r\n    // Balance mañana/tarde/noche\r\n    const slices = { mañana:0, tarde:0, noche:0 };\r\n    slots.forEach(s => {\r\n      const hour = parseInt(s.slot.split(':')[0],10);\r\n      const sumSlot = s.activities.reduce((sum,a)=> sum + a.duration,0);\r\n      if (hour < 12) slices.mañana += sumSlot;\r\n      else if (hour < 18) slices.tarde += sumSlot;\r\n      else slices.noche += sumSlot;\r\n    });\r\n\r\n    setMetrics({\r\n      totalMin,\r\n      pctDay: ((totalMin/1440)*100).toFixed(1),\r\n      distinct: unique,\r\n      entries: allActivities.length,\r\n      mean: mean.toFixed(1),\r\n      stddev: stddev.toFixed(1),\r\n      balance: slices\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div className=\"routines-container\">\r\n      <h1>Estadísticas de Rutinas</h1>\r\n      <div className=\"routines-controls\">\r\n        <label>Paciente:</label>\r\n        <select\r\n          value={patientId}\r\n          onChange={e => setPatientId(e.target.value)}\r\n        >\r\n          <option value=\"\">-- Selecciona paciente --</option>\r\n          {patients.map(p => (\r\n            <option key={p._id} value={p._id}>\r\n              {p.nombre} {p.apellidos}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n\r\n      {game && (\r\n        <>\r\n          {/* Resumen */}\r\n          <div className=\"routines-summary\">\r\n            <div className=\"summary-card\">\r\n              <h3>Tiempo programado</h3>\r\n              <p>{metrics.totalMin} min ({metrics.pctDay} %)</p>\r\n            </div>\r\n            <div className=\"summary-card\">\r\n              <h3>Actividades distintas</h3>\r\n              <p>{metrics.distinct} / {metrics.entries}</p>\r\n            </div>\r\n            <div className=\"summary-card\">\r\n              <h3>Duración media</h3>\r\n              <p>{metrics.mean} min</p>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Balance matutino/tarde/noche */}\r\n          <div className=\"bar-chart\">\r\n            <h3>Balance mañana / tarde / noche</h3>\r\n            {['mañana','tarde','noche'].map(key => {\r\n              const val = metrics.balance[key] || 0;\r\n              const pct = ((val / metrics.totalMin) * 100).toFixed(1);\r\n              return (\r\n                <div key={key} className=\"bar-row\">\r\n                  <span className=\"label\">{key}</span>\r\n                  <div className=\"bar\" style={{ width: `${pct}%` }} />\r\n                  <span style={{ marginLeft: '8px' }}>{pct}%</span>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n\r\n          {/* Tabla de métricas */}\r\n          <table className=\"metrics-table\">\r\n            <thead>\r\n              <tr>\r\n                <th>Métrica</th>\r\n                <th>Valor</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <tr>\r\n                <td>Desviación estándar</td>\r\n                <td>{metrics.stddev} min</td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PatientRoutines;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}