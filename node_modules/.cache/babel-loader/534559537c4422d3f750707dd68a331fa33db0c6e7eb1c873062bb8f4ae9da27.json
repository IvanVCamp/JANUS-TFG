{"ast":null,"code":"import React,{useState}from'react';import{useNavigate,useSearchParams}from'react-router-dom';import authService from'../services/authService';import'../styles/resetPassword.css';// Opcional: un archivo CSS para estilos\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function ResetPassword(){const navigate=useNavigate();// useSearchParams para obtener el \"token\" de la URL, e.g. ?token=XYZ\nconst[searchParams]=useSearchParams();const token=searchParams.get('token');const[password,setPassword]=useState('');const[confirmPassword,setConfirmPassword]=useState('');const[message,setMessage]=useState('');const[error,setError]=useState('');const handleSubmit=async e=>{e.preventDefault();// Validar que ambas contraseñas coinciden\nif(password!==confirmPassword){setError('Las contraseñas no coinciden');return;}try{// Llamamos al servicio para resetear la contraseña\nawait authService.resetPassword(token,password);setMessage('¡Contraseña actualizada con éxito!');// Redirigimos al dashboard (o a login) después de un tiempo\nsetTimeout(()=>{navigate('/dashboard');},2000);}catch(err){// Si el token es inválido o expiró, el backend devolverá un error\nsetError('Token inválido o expirado');}};return/*#__PURE__*/_jsxs(\"div\",{className:\"reset-password-container\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Restablecer Contrase\\xF1a\"}),message&&/*#__PURE__*/_jsx(\"p\",{className:\"success-msg\",children:message}),error&&/*#__PURE__*/_jsx(\"p\",{className:\"error-msg\",children:error}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit,className:\"reset-password-form\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"input-wrapper\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Nueva Contrase\\xF1a:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"password\",placeholder:\"********\",value:password,onChange:e=>setPassword(e.target.value),required:true})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"input-wrapper\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Confirmar Contrase\\xF1a:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"password\",placeholder:\"********\",value:confirmPassword,onChange:e=>setConfirmPassword(e.target.value),required:true})]}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",className:\"reset-btn\",children:\"Cambiar Contrase\\xF1a\"})]})]});}export default ResetPassword;","map":{"version":3,"names":["React","useState","useNavigate","useSearchParams","authService","jsx","_jsx","jsxs","_jsxs","ResetPassword","navigate","searchParams","token","get","password","setPassword","confirmPassword","setConfirmPassword","message","setMessage","error","setError","handleSubmit","e","preventDefault","resetPassword","setTimeout","err","className","children","onSubmit","type","placeholder","value","onChange","target","required"],"sources":["C:/Users/User/Desktop/TFG/prototipo-TFG/Janus-TFG/src/components/ResetPassword.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useNavigate, useSearchParams } from 'react-router-dom';\r\nimport authService from '../services/authService';\r\nimport '../styles/resetPassword.css'; // Opcional: un archivo CSS para estilos\r\n\r\nfunction ResetPassword() {\r\n  const navigate = useNavigate();\r\n  // useSearchParams para obtener el \"token\" de la URL, e.g. ?token=XYZ\r\n  const [searchParams] = useSearchParams();\r\n  const token = searchParams.get('token');\r\n\r\n  const [password, setPassword] = useState('');\r\n  const [confirmPassword, setConfirmPassword] = useState('');\r\n  const [message, setMessage] = useState('');\r\n  const [error, setError] = useState('');\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    // Validar que ambas contraseñas coinciden\r\n    if (password !== confirmPassword) {\r\n      setError('Las contraseñas no coinciden');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Llamamos al servicio para resetear la contraseña\r\n      await authService.resetPassword(token, password);\r\n      setMessage('¡Contraseña actualizada con éxito!');\r\n\r\n      // Redirigimos al dashboard (o a login) después de un tiempo\r\n      setTimeout(() => {\r\n        navigate('/dashboard');\r\n      }, 2000);\r\n    } catch (err) {\r\n      // Si el token es inválido o expiró, el backend devolverá un error\r\n      setError('Token inválido o expirado');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"reset-password-container\">\r\n      <h2>Restablecer Contraseña</h2>\r\n      {message && <p className=\"success-msg\">{message}</p>}\r\n      {error && <p className=\"error-msg\">{error}</p>}\r\n\r\n      <form onSubmit={handleSubmit} className=\"reset-password-form\">\r\n        <div className=\"input-wrapper\">\r\n          <label>Nueva Contraseña:</label>\r\n          <input\r\n            type=\"password\"\r\n            placeholder=\"********\"\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n            required\r\n          />\r\n        </div>\r\n\r\n        <div className=\"input-wrapper\">\r\n          <label>Confirmar Contraseña:</label>\r\n          <input\r\n            type=\"password\"\r\n            placeholder=\"********\"\r\n            value={confirmPassword}\r\n            onChange={(e) => setConfirmPassword(e.target.value)}\r\n            required\r\n          />\r\n        </div>\r\n\r\n        <button type=\"submit\" className=\"reset-btn\">Cambiar Contraseña</button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ResetPassword;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}